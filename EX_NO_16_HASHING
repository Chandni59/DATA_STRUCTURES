#include <stdio.h>
#include <stdlib.h>

#define SIZE 10

typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Hash function
int hash(int key) {
    return key % SIZE;
}

// Open Addressing (Linear Probing) functions
void insertOpenAddressing(int hashTable[], int key) {
    int index = hash(key);
    int i = 0;
    while (hashTable[(index + i) % SIZE] != -1) {
        i++;
    }
    hashTable[(index + i) % SIZE] = key;
}

void displayOpenAddressing(int hashTable[]) {
    for (int i = 0; i < SIZE; i++) {
        if (hashTable[i] != -1) {
            printf("Index %d: %d\n", i, hashTable[i]);
        } else {
            printf("Index %d: NULL\n", i);
        }
    }
}

// Closed Addressing (Chaining) functions
void insertChaining(Node* hashTable[], int key) {
    int index = hash(key);
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = key;
    newNode->next = NULL;

    if (hashTable[index] == NULL) {
        hashTable[index] = newNode;
    } else {
        Node* temp = hashTable[index];
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void displayChaining(Node* hashTable[]) {
    for (int i = 0; i < SIZE; i++) {
        printf("Index %d: ", i);
        Node* temp = hashTable[i];
        while (temp != NULL) {
            printf("%d -> ", temp->data);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}

int main() {
    int choice, n, key;
    printf("Choose collision resolution method:\n1. Open Addressing (Linear Probing)\n2. Closed Addressing (Chaining)\nEnter choice: ");
    scanf("%d", &choice);

    if (choice == 1) {
        int hashTable[SIZE];
        for (int i = 0; i < SIZE; i++) {
            hashTable[i] = -1;
        }

        printf("Enter the number of elements: ");
        scanf("%d", &n);

        for (int i = 0; i < n; i++) {
            printf("Enter element %d: ", i + 1);
            scanf("%d", &key);
            insertOpenAddressing(hashTable, key);
        }

        printf("Hash Table using Open Addressing (Linear Probing):\n");
        displayOpenAddressing(hashTable);
    } else if (choice == 2) {
        Node* hashTable[SIZE];
        for (int i = 0; i < SIZE; i++) {
            hashTable[i] = NULL;
        }

        printf("Enter the number of elements: ");
        scanf("%d", &n);

        for (int i = 0; i < n; i++) {
            printf("Enter element %d: ", i + 1);
            scanf("%d", &key);
            insertChaining(hashTable, key);
        }

        printf("Hash Table using Closed Addressing (Chaining):\n");
        displayChaining(hashTable);
    } else {
        printf("Invalid choice!\n");
    }

    return 0;
}
